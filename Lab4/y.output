State 6 conflicts: 1 shift/reduce
State 25 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: user_type_def ';' var_declarations ';' statements ';'
    2        | var_declarations ';' statements ';'

    3 var_declarations: var_declaration
    4                 | var_declaration ';' var_declarations

    5 var_declaration: TYPE_TOKEN var_list
    6                | user_defined_type var_list

    7 var_list: ID_TOKEN
    8         | ID_TOKEN ',' var_list

    9 user_type_def: DEFINE_TOKEN user_defined_type '(' var_declarations ')'

   10 user_defined_type: ID_TOKEN

   11 statements: statement
   12           | statement ';' statements

   13 statement: assign_stmt
   14          | input_stmt
   15          | output_stmt
   16          | loop_stmt
   17          | conditional_stmt

   18 assign_stmt: ID_TOKEN ASSIGNMENT_TOKEN expr

   19 expr: ID_TOKEN
   20     | CONST_TOKEN
   21     | ID_TOKEN operator expr
   22     | CONST_TOKEN operator expr

   23 operator: MULT
   24         | ADD
   25         | DIVISION
   26         | SUBTRACT
   27         | REMAINDER
   28         | DOT

   29 input_stmt: INPUT_TOKEN '(' expr ')'

   30 output_stmt: OUTPUT_TOKEN '(' expr ')'

   31 loop_stmt: WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN

   32 logical_expr: ID_TOKEN BOOL_OP ID_TOKEN
   33             | ID_TOKEN BOOL_OP CONST_TOKEN
   34             | CONST_TOKEN BOOL_OP ID_TOKEN
   35             | CONST_TOKEN BOOL_OP CONST_TOKEN

   36 conditional_stmt: IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN


Terminals, with rules where they appear

$end (0) 0
'(' (40) 9 29 30 31 36
')' (41) 9 29 30 31 36
',' (44) 8
':' (58) 31 36
';' (59) 1 2 4 12
error (256)
ID_TOKEN (258) 7 8 10 18 19 21 32 33 34
CONST_TOKEN (259) 20 22 33 34 35
DEFINE_TOKEN (260) 9
TYPE_TOKEN (261) 5
INPUT_TOKEN (262) 29
ASSIGNMENT_TOKEN (263) 18
OUTPUT_TOKEN (264) 30
WHILE_TOKEN (265) 31
BEGIN_TOKEN (266) 31 36
END_TOKEN (267) 31 36
IF_TOKEN (268) 36
SUBTRACT (269) 26
ADD (270) 24
DIVISION (271) 25
MULT (272) 23
REMAINDER (273) 27
BOOL_OP (274) 32 33 34 35
DOT (275) 28


Nonterminals, with rules where they appear

$accept (26)
    on left: 0
program (27)
    on left: 1 2, on right: 0
var_declarations (28)
    on left: 3 4, on right: 1 2 4 9
var_declaration (29)
    on left: 5 6, on right: 3 4
var_list (30)
    on left: 7 8, on right: 5 6 8
user_type_def (31)
    on left: 9, on right: 1
user_defined_type (32)
    on left: 10, on right: 6 9
statements (33)
    on left: 11 12, on right: 1 2 12 31 36
statement (34)
    on left: 13 14 15 16 17, on right: 11 12
assign_stmt (35)
    on left: 18, on right: 13
expr (36)
    on left: 19 20 21 22, on right: 18 21 22 29 30
operator (37)
    on left: 23 24 25 26 27 28, on right: 21 22
input_stmt (38)
    on left: 29, on right: 14
output_stmt (39)
    on left: 30, on right: 15
loop_stmt (40)
    on left: 31, on right: 16
logical_expr (41)
    on left: 32 33 34 35, on right: 31 36
conditional_stmt (42)
    on left: 36, on right: 17


state 0

    0 $accept: . program $end
    1 program: . user_type_def ';' var_declarations ';' statements ';'
    2        | . var_declarations ';' statements ';'
    3 var_declarations: . var_declaration
    4                 | . var_declaration ';' var_declarations
    5 var_declaration: . TYPE_TOKEN var_list
    6                | . user_defined_type var_list
    9 user_type_def: . DEFINE_TOKEN user_defined_type '(' var_declarations ')'
   10 user_defined_type: . ID_TOKEN

    ID_TOKEN      shift, and go to state 1
    DEFINE_TOKEN  shift, and go to state 2
    TYPE_TOKEN    shift, and go to state 3

    program            go to state 4
    var_declarations   go to state 5
    var_declaration    go to state 6
    user_type_def      go to state 7
    user_defined_type  go to state 8


state 1

   10 user_defined_type: ID_TOKEN .

    $default  reduce using rule 10 (user_defined_type)


state 2

    9 user_type_def: DEFINE_TOKEN . user_defined_type '(' var_declarations ')'
   10 user_defined_type: . ID_TOKEN

    ID_TOKEN  shift, and go to state 1

    user_defined_type  go to state 9


state 3

    5 var_declaration: TYPE_TOKEN . var_list
    7 var_list: . ID_TOKEN
    8         | . ID_TOKEN ',' var_list

    ID_TOKEN  shift, and go to state 10

    var_list  go to state 11


state 4

    0 $accept: program . $end

    $end  shift, and go to state 12


state 5

    2 program: var_declarations . ';' statements ';'

    ';'  shift, and go to state 13


state 6

    3 var_declarations: var_declaration .  [';', ')']
    4                 | var_declaration . ';' var_declarations

    ';'  shift, and go to state 14

    ';'       [reduce using rule 3 (var_declarations)]
    $default  reduce using rule 3 (var_declarations)


state 7

    1 program: user_type_def . ';' var_declarations ';' statements ';'

    ';'  shift, and go to state 15


state 8

    6 var_declaration: user_defined_type . var_list
    7 var_list: . ID_TOKEN
    8         | . ID_TOKEN ',' var_list

    ID_TOKEN  shift, and go to state 10

    var_list  go to state 16


state 9

    9 user_type_def: DEFINE_TOKEN user_defined_type . '(' var_declarations ')'

    '('  shift, and go to state 17


state 10

    7 var_list: ID_TOKEN .  [';', ')']
    8         | ID_TOKEN . ',' var_list

    ','  shift, and go to state 18

    $default  reduce using rule 7 (var_list)


state 11

    5 var_declaration: TYPE_TOKEN var_list .

    $default  reduce using rule 5 (var_declaration)


state 12

    0 $accept: program $end .

    $default  accept


state 13

    2 program: var_declarations ';' . statements ';'
   11 statements: . statement
   12           | . statement ';' statements
   13 statement: . assign_stmt
   14          | . input_stmt
   15          | . output_stmt
   16          | . loop_stmt
   17          | . conditional_stmt
   18 assign_stmt: . ID_TOKEN ASSIGNMENT_TOKEN expr
   29 input_stmt: . INPUT_TOKEN '(' expr ')'
   30 output_stmt: . OUTPUT_TOKEN '(' expr ')'
   31 loop_stmt: . WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN
   36 conditional_stmt: . IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN

    ID_TOKEN      shift, and go to state 19
    INPUT_TOKEN   shift, and go to state 20
    OUTPUT_TOKEN  shift, and go to state 21
    WHILE_TOKEN   shift, and go to state 22
    IF_TOKEN      shift, and go to state 23

    statements        go to state 24
    statement         go to state 25
    assign_stmt       go to state 26
    input_stmt        go to state 27
    output_stmt       go to state 28
    loop_stmt         go to state 29
    conditional_stmt  go to state 30


state 14

    3 var_declarations: . var_declaration
    4                 | . var_declaration ';' var_declarations
    4                 | var_declaration ';' . var_declarations
    5 var_declaration: . TYPE_TOKEN var_list
    6                | . user_defined_type var_list
   10 user_defined_type: . ID_TOKEN

    ID_TOKEN    shift, and go to state 1
    TYPE_TOKEN  shift, and go to state 3

    var_declarations   go to state 31
    var_declaration    go to state 6
    user_defined_type  go to state 8


state 15

    1 program: user_type_def ';' . var_declarations ';' statements ';'
    3 var_declarations: . var_declaration
    4                 | . var_declaration ';' var_declarations
    5 var_declaration: . TYPE_TOKEN var_list
    6                | . user_defined_type var_list
   10 user_defined_type: . ID_TOKEN

    ID_TOKEN    shift, and go to state 1
    TYPE_TOKEN  shift, and go to state 3

    var_declarations   go to state 32
    var_declaration    go to state 6
    user_defined_type  go to state 8


state 16

    6 var_declaration: user_defined_type var_list .

    $default  reduce using rule 6 (var_declaration)


state 17

    3 var_declarations: . var_declaration
    4                 | . var_declaration ';' var_declarations
    5 var_declaration: . TYPE_TOKEN var_list
    6                | . user_defined_type var_list
    9 user_type_def: DEFINE_TOKEN user_defined_type '(' . var_declarations ')'
   10 user_defined_type: . ID_TOKEN

    ID_TOKEN    shift, and go to state 1
    TYPE_TOKEN  shift, and go to state 3

    var_declarations   go to state 33
    var_declaration    go to state 6
    user_defined_type  go to state 8


state 18

    7 var_list: . ID_TOKEN
    8         | . ID_TOKEN ',' var_list
    8         | ID_TOKEN ',' . var_list

    ID_TOKEN  shift, and go to state 10

    var_list  go to state 34


state 19

   18 assign_stmt: ID_TOKEN . ASSIGNMENT_TOKEN expr

    ASSIGNMENT_TOKEN  shift, and go to state 35


state 20

   29 input_stmt: INPUT_TOKEN . '(' expr ')'

    '('  shift, and go to state 36


state 21

   30 output_stmt: OUTPUT_TOKEN . '(' expr ')'

    '('  shift, and go to state 37


state 22

   31 loop_stmt: WHILE_TOKEN . '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN

    '('  shift, and go to state 38


state 23

   36 conditional_stmt: IF_TOKEN . '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN

    '('  shift, and go to state 39


state 24

    2 program: var_declarations ';' statements . ';'

    ';'  shift, and go to state 40


state 25

   11 statements: statement .  [END_TOKEN, ';']
   12           | statement . ';' statements

    ';'  shift, and go to state 41

    ';'       [reduce using rule 11 (statements)]
    $default  reduce using rule 11 (statements)


state 26

   13 statement: assign_stmt .

    $default  reduce using rule 13 (statement)


state 27

   14 statement: input_stmt .

    $default  reduce using rule 14 (statement)


state 28

   15 statement: output_stmt .

    $default  reduce using rule 15 (statement)


state 29

   16 statement: loop_stmt .

    $default  reduce using rule 16 (statement)


state 30

   17 statement: conditional_stmt .

    $default  reduce using rule 17 (statement)


state 31

    4 var_declarations: var_declaration ';' var_declarations .

    $default  reduce using rule 4 (var_declarations)


state 32

    1 program: user_type_def ';' var_declarations . ';' statements ';'

    ';'  shift, and go to state 42


state 33

    9 user_type_def: DEFINE_TOKEN user_defined_type '(' var_declarations . ')'

    ')'  shift, and go to state 43


state 34

    8 var_list: ID_TOKEN ',' var_list .

    $default  reduce using rule 8 (var_list)


state 35

   18 assign_stmt: ID_TOKEN ASSIGNMENT_TOKEN . expr
   19 expr: . ID_TOKEN
   20     | . CONST_TOKEN
   21     | . ID_TOKEN operator expr
   22     | . CONST_TOKEN operator expr

    ID_TOKEN     shift, and go to state 44
    CONST_TOKEN  shift, and go to state 45

    expr  go to state 46


state 36

   19 expr: . ID_TOKEN
   20     | . CONST_TOKEN
   21     | . ID_TOKEN operator expr
   22     | . CONST_TOKEN operator expr
   29 input_stmt: INPUT_TOKEN '(' . expr ')'

    ID_TOKEN     shift, and go to state 44
    CONST_TOKEN  shift, and go to state 45

    expr  go to state 47


state 37

   19 expr: . ID_TOKEN
   20     | . CONST_TOKEN
   21     | . ID_TOKEN operator expr
   22     | . CONST_TOKEN operator expr
   30 output_stmt: OUTPUT_TOKEN '(' . expr ')'

    ID_TOKEN     shift, and go to state 44
    CONST_TOKEN  shift, and go to state 45

    expr  go to state 48


state 38

   31 loop_stmt: WHILE_TOKEN '(' . logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN
   32 logical_expr: . ID_TOKEN BOOL_OP ID_TOKEN
   33             | . ID_TOKEN BOOL_OP CONST_TOKEN
   34             | . CONST_TOKEN BOOL_OP ID_TOKEN
   35             | . CONST_TOKEN BOOL_OP CONST_TOKEN

    ID_TOKEN     shift, and go to state 49
    CONST_TOKEN  shift, and go to state 50

    logical_expr  go to state 51


state 39

   32 logical_expr: . ID_TOKEN BOOL_OP ID_TOKEN
   33             | . ID_TOKEN BOOL_OP CONST_TOKEN
   34             | . CONST_TOKEN BOOL_OP ID_TOKEN
   35             | . CONST_TOKEN BOOL_OP CONST_TOKEN
   36 conditional_stmt: IF_TOKEN '(' . logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN

    ID_TOKEN     shift, and go to state 49
    CONST_TOKEN  shift, and go to state 50

    logical_expr  go to state 52


state 40

    2 program: var_declarations ';' statements ';' .

    $default  reduce using rule 2 (program)


state 41

   11 statements: . statement
   12           | . statement ';' statements
   12           | statement ';' . statements
   13 statement: . assign_stmt
   14          | . input_stmt
   15          | . output_stmt
   16          | . loop_stmt
   17          | . conditional_stmt
   18 assign_stmt: . ID_TOKEN ASSIGNMENT_TOKEN expr
   29 input_stmt: . INPUT_TOKEN '(' expr ')'
   30 output_stmt: . OUTPUT_TOKEN '(' expr ')'
   31 loop_stmt: . WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN
   36 conditional_stmt: . IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN

    ID_TOKEN      shift, and go to state 19
    INPUT_TOKEN   shift, and go to state 20
    OUTPUT_TOKEN  shift, and go to state 21
    WHILE_TOKEN   shift, and go to state 22
    IF_TOKEN      shift, and go to state 23

    statements        go to state 53
    statement         go to state 25
    assign_stmt       go to state 26
    input_stmt        go to state 27
    output_stmt       go to state 28
    loop_stmt         go to state 29
    conditional_stmt  go to state 30


state 42

    1 program: user_type_def ';' var_declarations ';' . statements ';'
   11 statements: . statement
   12           | . statement ';' statements
   13 statement: . assign_stmt
   14          | . input_stmt
   15          | . output_stmt
   16          | . loop_stmt
   17          | . conditional_stmt
   18 assign_stmt: . ID_TOKEN ASSIGNMENT_TOKEN expr
   29 input_stmt: . INPUT_TOKEN '(' expr ')'
   30 output_stmt: . OUTPUT_TOKEN '(' expr ')'
   31 loop_stmt: . WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN
   36 conditional_stmt: . IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN

    ID_TOKEN      shift, and go to state 19
    INPUT_TOKEN   shift, and go to state 20
    OUTPUT_TOKEN  shift, and go to state 21
    WHILE_TOKEN   shift, and go to state 22
    IF_TOKEN      shift, and go to state 23

    statements        go to state 54
    statement         go to state 25
    assign_stmt       go to state 26
    input_stmt        go to state 27
    output_stmt       go to state 28
    loop_stmt         go to state 29
    conditional_stmt  go to state 30


state 43

    9 user_type_def: DEFINE_TOKEN user_defined_type '(' var_declarations ')' .

    $default  reduce using rule 9 (user_type_def)


state 44

   19 expr: ID_TOKEN .  [END_TOKEN, ';', ')']
   21     | ID_TOKEN . operator expr
   23 operator: . MULT
   24         | . ADD
   25         | . DIVISION
   26         | . SUBTRACT
   27         | . REMAINDER
   28         | . DOT

    SUBTRACT   shift, and go to state 55
    ADD        shift, and go to state 56
    DIVISION   shift, and go to state 57
    MULT       shift, and go to state 58
    REMAINDER  shift, and go to state 59
    DOT        shift, and go to state 60

    $default  reduce using rule 19 (expr)

    operator  go to state 61


state 45

   20 expr: CONST_TOKEN .  [END_TOKEN, ';', ')']
   22     | CONST_TOKEN . operator expr
   23 operator: . MULT
   24         | . ADD
   25         | . DIVISION
   26         | . SUBTRACT
   27         | . REMAINDER
   28         | . DOT

    SUBTRACT   shift, and go to state 55
    ADD        shift, and go to state 56
    DIVISION   shift, and go to state 57
    MULT       shift, and go to state 58
    REMAINDER  shift, and go to state 59
    DOT        shift, and go to state 60

    $default  reduce using rule 20 (expr)

    operator  go to state 62


state 46

   18 assign_stmt: ID_TOKEN ASSIGNMENT_TOKEN expr .

    $default  reduce using rule 18 (assign_stmt)


state 47

   29 input_stmt: INPUT_TOKEN '(' expr . ')'

    ')'  shift, and go to state 63


state 48

   30 output_stmt: OUTPUT_TOKEN '(' expr . ')'

    ')'  shift, and go to state 64


state 49

   32 logical_expr: ID_TOKEN . BOOL_OP ID_TOKEN
   33             | ID_TOKEN . BOOL_OP CONST_TOKEN

    BOOL_OP  shift, and go to state 65


state 50

   34 logical_expr: CONST_TOKEN . BOOL_OP ID_TOKEN
   35             | CONST_TOKEN . BOOL_OP CONST_TOKEN

    BOOL_OP  shift, and go to state 66


state 51

   31 loop_stmt: WHILE_TOKEN '(' logical_expr . ')' BEGIN_TOKEN ':' statements END_TOKEN

    ')'  shift, and go to state 67


state 52

   36 conditional_stmt: IF_TOKEN '(' logical_expr . ')' BEGIN_TOKEN ':' statements END_TOKEN

    ')'  shift, and go to state 68


state 53

   12 statements: statement ';' statements .

    $default  reduce using rule 12 (statements)


state 54

    1 program: user_type_def ';' var_declarations ';' statements . ';'

    ';'  shift, and go to state 69


state 55

   26 operator: SUBTRACT .

    $default  reduce using rule 26 (operator)


state 56

   24 operator: ADD .

    $default  reduce using rule 24 (operator)


state 57

   25 operator: DIVISION .

    $default  reduce using rule 25 (operator)


state 58

   23 operator: MULT .

    $default  reduce using rule 23 (operator)


state 59

   27 operator: REMAINDER .

    $default  reduce using rule 27 (operator)


state 60

   28 operator: DOT .

    $default  reduce using rule 28 (operator)


state 61

   19 expr: . ID_TOKEN
   20     | . CONST_TOKEN
   21     | . ID_TOKEN operator expr
   21     | ID_TOKEN operator . expr
   22     | . CONST_TOKEN operator expr

    ID_TOKEN     shift, and go to state 44
    CONST_TOKEN  shift, and go to state 45

    expr  go to state 70


state 62

   19 expr: . ID_TOKEN
   20     | . CONST_TOKEN
   21     | . ID_TOKEN operator expr
   22     | . CONST_TOKEN operator expr
   22     | CONST_TOKEN operator . expr

    ID_TOKEN     shift, and go to state 44
    CONST_TOKEN  shift, and go to state 45

    expr  go to state 71


state 63

   29 input_stmt: INPUT_TOKEN '(' expr ')' .

    $default  reduce using rule 29 (input_stmt)


state 64

   30 output_stmt: OUTPUT_TOKEN '(' expr ')' .

    $default  reduce using rule 30 (output_stmt)


state 65

   32 logical_expr: ID_TOKEN BOOL_OP . ID_TOKEN
   33             | ID_TOKEN BOOL_OP . CONST_TOKEN

    ID_TOKEN     shift, and go to state 72
    CONST_TOKEN  shift, and go to state 73


state 66

   34 logical_expr: CONST_TOKEN BOOL_OP . ID_TOKEN
   35             | CONST_TOKEN BOOL_OP . CONST_TOKEN

    ID_TOKEN     shift, and go to state 74
    CONST_TOKEN  shift, and go to state 75


state 67

   31 loop_stmt: WHILE_TOKEN '(' logical_expr ')' . BEGIN_TOKEN ':' statements END_TOKEN

    BEGIN_TOKEN  shift, and go to state 76


state 68

   36 conditional_stmt: IF_TOKEN '(' logical_expr ')' . BEGIN_TOKEN ':' statements END_TOKEN

    BEGIN_TOKEN  shift, and go to state 77


state 69

    1 program: user_type_def ';' var_declarations ';' statements ';' .

    $default  reduce using rule 1 (program)


state 70

   21 expr: ID_TOKEN operator expr .

    $default  reduce using rule 21 (expr)


state 71

   22 expr: CONST_TOKEN operator expr .

    $default  reduce using rule 22 (expr)


state 72

   32 logical_expr: ID_TOKEN BOOL_OP ID_TOKEN .

    $default  reduce using rule 32 (logical_expr)


state 73

   33 logical_expr: ID_TOKEN BOOL_OP CONST_TOKEN .

    $default  reduce using rule 33 (logical_expr)


state 74

   34 logical_expr: CONST_TOKEN BOOL_OP ID_TOKEN .

    $default  reduce using rule 34 (logical_expr)


state 75

   35 logical_expr: CONST_TOKEN BOOL_OP CONST_TOKEN .

    $default  reduce using rule 35 (logical_expr)


state 76

   31 loop_stmt: WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN . ':' statements END_TOKEN

    ':'  shift, and go to state 78


state 77

   36 conditional_stmt: IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN . ':' statements END_TOKEN

    ':'  shift, and go to state 79


state 78

   11 statements: . statement
   12           | . statement ';' statements
   13 statement: . assign_stmt
   14          | . input_stmt
   15          | . output_stmt
   16          | . loop_stmt
   17          | . conditional_stmt
   18 assign_stmt: . ID_TOKEN ASSIGNMENT_TOKEN expr
   29 input_stmt: . INPUT_TOKEN '(' expr ')'
   30 output_stmt: . OUTPUT_TOKEN '(' expr ')'
   31 loop_stmt: . WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN
   31          | WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' . statements END_TOKEN
   36 conditional_stmt: . IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN

    ID_TOKEN      shift, and go to state 19
    INPUT_TOKEN   shift, and go to state 20
    OUTPUT_TOKEN  shift, and go to state 21
    WHILE_TOKEN   shift, and go to state 22
    IF_TOKEN      shift, and go to state 23

    statements        go to state 80
    statement         go to state 25
    assign_stmt       go to state 26
    input_stmt        go to state 27
    output_stmt       go to state 28
    loop_stmt         go to state 29
    conditional_stmt  go to state 30


state 79

   11 statements: . statement
   12           | . statement ';' statements
   13 statement: . assign_stmt
   14          | . input_stmt
   15          | . output_stmt
   16          | . loop_stmt
   17          | . conditional_stmt
   18 assign_stmt: . ID_TOKEN ASSIGNMENT_TOKEN expr
   29 input_stmt: . INPUT_TOKEN '(' expr ')'
   30 output_stmt: . OUTPUT_TOKEN '(' expr ')'
   31 loop_stmt: . WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN
   36 conditional_stmt: . IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN
   36                 | IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' . statements END_TOKEN

    ID_TOKEN      shift, and go to state 19
    INPUT_TOKEN   shift, and go to state 20
    OUTPUT_TOKEN  shift, and go to state 21
    WHILE_TOKEN   shift, and go to state 22
    IF_TOKEN      shift, and go to state 23

    statements        go to state 81
    statement         go to state 25
    assign_stmt       go to state 26
    input_stmt        go to state 27
    output_stmt       go to state 28
    loop_stmt         go to state 29
    conditional_stmt  go to state 30


state 80

   31 loop_stmt: WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements . END_TOKEN

    END_TOKEN  shift, and go to state 82


state 81

   36 conditional_stmt: IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements . END_TOKEN

    END_TOKEN  shift, and go to state 83


state 82

   31 loop_stmt: WHILE_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN .

    $default  reduce using rule 31 (loop_stmt)


state 83

   36 conditional_stmt: IF_TOKEN '(' logical_expr ')' BEGIN_TOKEN ':' statements END_TOKEN .

    $default  reduce using rule 36 (conditional_stmt)
